import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { ObjectId } from "mongodb";
import { Model } from 'mongoose';
import { TransactionHelper } from 'src/transaction/transaction.helper';
import { PageResponseDto } from 'src/common-dto/page-response.dto';
import { FileUploadService } from 'src/file-upload/file-upload.service';
import { <%=getBigModuleTitle(moduleConf.nameEn) %>, <%=getBigModuleTitle(moduleConf.nameEn) %>Document } from './dto/<%= moduleConf.nameEn %>.schema';
<% if(searchListForOther.length) {%>import { <%=getBigModuleTitle(moduleConf.nameEn) %>PageDto } from './dto/<%= moduleConf.nameEn %>-page.dto';
<% } else {%>import { PageRequestDto } from 'src/common-dto/page-request.dto';  <%} if(conf.config.UUID){ %>import { UUID } from 'src/utils/random-tools';
<% } %>
@Injectable()
export class <%=getBigModuleTitle(moduleConf.nameEn) %>Service {
    private readonly logger = new Logger(<%=getBigModuleTitle(moduleConf.nameEn) %>Service.name);
    constructor(
        @InjectModel(<%=getBigModuleTitle(moduleConf.nameEn) %>.name) private <%=getSmallModuleTitle(moduleConf.nameEn) %>Model: Model<<%=getBigModuleTitle(moduleConf.nameEn) %>Document>,
        private fileUploadService: FileUploadService,
        private transactionHelper: TransactionHelper
    ) { };
<% if(conf.config.add){ %>
    async create(data: <%=getBigModuleTitle(moduleConf.nameEn) %>, req: any): Promise<<%=getBigModuleTitle(moduleConf.nameEn) %>> {
        data.updateUser = req?.user?.userName;
        data.updateDate = new Date();
        data.addUser = req?.user?.userName;
        data.addDate = new Date();
        <% if(conf.config.UUID){ %>data.UUID = UUID();<% } %>
        return new this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model(data).save();
    }<% } %>
<% if(conf.config.del){ %>
    async deleteById(id: string): Promise<any> {
        const data = await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.findOne({ _id: new ObjectId(id) });
        this.logger.warn("删除数据",data);
        if (data) {
            // 删除文件
            data.fileIds.forEach(k => {
                try {
                    this.fileUploadService.delete(k)
                } catch (error) {
                    this.logger.error(error);
                }
            })
        } else {
            throw new Error("数据不存在");
        }
        return this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.deleteOne({ _id: new ObjectId(id) });
    }<% if(conf.config.UUID){ %>

    async deleteByUUID(UUID: string): Promise<any> {
        const data = await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.findOne({ UUID });
        if (data) {
            // 删除文件
            data.fileIds.forEach(k => {
                try {
                    this.fileUploadService.delete(k)
                } catch (error) {
                    this.logger.error(error);
                }
            })
        } else {
            throw new Error("数据不存在");
        }
        return this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.deleteOne({ UUID });
    }<% } %><% } %>
<% if(conf.config.update){%>
    async update(data: <%=getBigModuleTitle(moduleConf.nameEn) %>, id: string, req: any): Promise<any> {
        data.updateUser = req?.user?.userName;
        data.updateDate = new Date();
        delete data.addDate;
        delete data.addUser;
        return await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.updateOne({ _id: new ObjectId(id) }, { $set: { ...data } });
    }
<% if(conf.config.UUID){ %>
    async updateByUUID(data: <%=getBigModuleTitle(moduleConf.nameEn) %>, UUID: string, req: any): Promise<any> {
        data.updateUser = req?.user?.userName;
        data.updateDate = new Date();
        delete data.addDate;
        delete data.addUser;
        return await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.updateOne({ UUID }, { $set: { ...data } });
    }<% } %><% } %>
<% if(conf.config.query){%><% if(searchListForOther.length) {%>
    async getPage(page: <%=getBigModuleTitle(moduleConf.nameEn) %>PageDto): Promise<PageResponseDto<<%=getBigModuleTitle(moduleConf.nameEn) %>>> {
        const keyWord = page?.keyWord ? page?.keyWord : '';
        <% if(searchListForLike.length) {%>let map: any = {
            $or: [
                <% for (let index = 0; index < searchListForLike.length; index++) { %>{ <%=searchListForLike[index].fieldEnName %>: { $regex: keyWord } },<% } %>
            ]
        };<% } else {%>let map: any = {};<% } %>
        <% for (let index = 0; index < searchListForOther.length; index++) { %><% if(searchListForOther[index].fieldType=="string") {%>
        if (page.<%=searchListForOther[index].fieldEnName %>) {
            map.<%=searchListForOther[index].fieldEnName %> = <%=getMethodString(searchListForOther[index]) %>;
        }<% } else { %>map.<%=searchListForOther[index].fieldEnName %> = <%=getMethodString(searchListForOther[index]) %>;
        <% } %><% } %>
        const pageData = new PageResponseDto<<%=getBigModuleTitle(moduleConf.nameEn) %>>();
        pageData.total = await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.countDocuments(map <%=listShow %>);
        pageData.list = await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.find(map <%=listShow %>).limit(page.pageSize).skip((page.pageIndex - 1) * page.pageSize).sort({ updateDate: -1 });
        return pageData;
    }
    <% }else{ %>
    async getPage(page: PageRequestDto): Promise<PageResponseDto<<%=getBigModuleTitle(moduleConf.nameEn) %>>> {
        const keyWord = page?.keyWord ? page?.keyWord : '';
        <% if(searchListForLike.length) {%>
        const map: any = {
            $or: [
                <% for (let index = 0; index < searchListForLike.length; index++) { %>
                { <%=searchListForLike[index].fieldEnName %>: { $regex: keyWord } },
                <% } %>
            ]
        };
        <% } else {%>
        const map: any = {}
        <% } %>
        const pageData = new PageResponseDto<<%=getBigModuleTitle(moduleConf.nameEn) %>>();
        pageData.total = await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.countDocuments(map <%=listShow %>);
        pageData.list = await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.find(map <%=listShow %>).limit(page.pageSize).skip((page.pageIndex - 1) * page.pageSize).sort({ updateDate: -1 });
        return pageData;
    }
<% } %>
    async getDetailById(id: string): Promise<<%=getBigModuleTitle(moduleConf.nameEn) %>> {
        let map: any = { _id: new ObjectId(id) }
        return await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.findOne(map);
    }
    <% if(conf.config.UUID){ %>
    async getDetailByUUID(UUID: string): Promise<<%=getBigModuleTitle(moduleConf.nameEn) %>> {
        let map: any = { UUID }
        return await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.findOne(map);
    }
    <% } %>
    async getByIds(ids: string[]): Promise<<%=getBigModuleTitle(moduleConf.nameEn) %>[]> {
        const objectIds: ObjectId[] = [];
        ids.forEach(id => {
            objectIds.push(new ObjectId(id));
        });
        let map: any = { _id: { $in: objectIds } };
        return await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.find(map);
    }
   <% if(conf.config.UUID){ %>
    async getByUUIDs(UUIDs: string[]): Promise<<%=getBigModuleTitle(moduleConf.nameEn) %>[]> {
        let map: any = { UUID:{ $in: UUIDs } }
        return await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.find(map);
    }
    <% } %>
    async getList(count?: number): Promise<<%=getBigModuleTitle(moduleConf.nameEn) %>[]> {
        let map:any = {};
        if(count){
            return await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.find(map).limit(count);
        }else{
            return await this.<%=getSmallModuleTitle(moduleConf.nameEn) %>Model.find(map);
        }
    }<% } %>
}
